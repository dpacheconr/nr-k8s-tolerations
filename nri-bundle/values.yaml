newrelic-infrastructure:
  # newrelic-infrastructure.enabled -- Install the [`newrelic-infrastructure` chart](https://github.com/newrelic/nri-kubernetes/tree/main/charts/newrelic-infrastructure)
  enabled: true
  privileged: true

newrelic-prometheus-agent:
  # newrelic-prometheus-agent.enabled -- Install the [`newrelic-prometheus-agent` chart](https://github.com/newrelic/newrelic-prometheus-configurator/tree/main/charts/newrelic-prometheus-agent)
  enabled: true
  lowDataMode: true
  config:
    kubernetes:
      integrations_filter: 
        enabled: false

nri-metadata-injection:
  # nri-metadata-injection.enabled -- Install the [`nri-metadata-injection` chart](https://github.com/newrelic/k8s-metadata-injection/tree/main/charts/nri-metadata-injection)
  enabled: true
  tolerations:
    - key: "kubernetes.azure.com/scalesetpriority"
      operator: "Equal"
      value: "spot"
      effect: "NoSchedule"
    - key: "CriticalAddonsOnly"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "agentpool"
            operator: In
            values:
            - "userpool"

kube-state-metrics:
  image: 
    tag: "v2.10.0"

  enabled: true
  tolerations:
    - key: "kubernetes.azure.com/scalesetpriority"
      operator: "Equal"
      value: "spot"
      effect: "NoSchedule"
    - key: "CriticalAddonsOnly"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "agentpool"
            operator: In
            values:
            - "userpool"

nri-kube-events:
  # nri-kube-events.enabled -- Install the [`nri-kube-events` chart](https://github.com/newrelic/nri-kube-events/tree/main/charts/nri-kube-events)
  enabled: true

newrelic-logging:
  # newrelic-logging.enabled -- Install the [`newrelic-logging` chart](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-logging)
  enabled: true
  lowDataMode: false

newrelic-pixie:
  namespace: pixie
  # newrelic-pixie.enabled -- Install the [`newrelic-pixie`](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-pixie)
  apiKey: "XXX"
  enabled: false
  tolerations:
    - key: "kubernetes.azure.com/scalesetpriority"
      operator: "Equal"
      value: "spot"
      effect: "NoSchedule"
    - key: "CriticalAddonsOnly"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "agentpool"
            operator: In
            values:
            - "userpool"

pixie-chart:
  annotations:
    scheduler.alpha.kubernetes.io/defaultTolerations: '[{"operator": "Equal", "value": "spot", "key": "kubernetes.azure.com/scalesetpriority"},{"operator": "Equal", "value": "true", "key": "CriticalAddonsOnly"}]'
  
  tolerations:
    - key: "kubernetes.io/arch"
      operator: "Equal"
      value: "amd64"
      effect: "NoSchedule"
    - key: "kubernetes.io/arch"
      operator: "Equal"
      value: "amd64"
      effect: "NoExecute"
    - key: "kubernetes.io/arch"
      operator: "Equal"
      value: "arm64"
      effect: "NoSchedule"
    - key: "kubernetes.io/arch"
      operator: "Equal"
      value: "arm64"
      effect: "NoExecute"
    - key: "kubernetes.azure.com/scalesetpriority"
      operator: "Equal"
      value: "spot"
      effect: "NoSchedule"
    - key: "CriticalAddonsOnly"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
      
  nodeselector: {}
    # agentpool: userpool
    
  enabled: false
  ## OLM configuration
  # OLM is used for deploying and ensuring the operator is up-to-date.
  # deployOLM indicates whether OLM should be deployed. This should only be
  # disabled if an instance of OLM is already configured on the cluster.
  # Should be string "true" if true, but "false" otherwise. If empty, defaults
  # to whether OLM is present in the cluster.
  deployOLM: "true"
  # The namespace that olm should run in. If olm has already been deployed
  # to the cluster, this should be the namespace that olm is already running in.
  olmNamespace: "olm"
  # The namespace which olm operators should run in. If olm has already
  # been deployed to the cluster, this should be the namespace that the olm operators
  # are running in.
  olmOperatorNamespace: "pixie"
  # The bundle channel which OLM should listen to for the Vizier operator bundles.
  # Should be "stable" for production-versions of the operator, and "test" for release candidates.
  olmBundleChannel: "stable"
  # Optional annotations and labels for CatalogSource.
  olmCatalogSource:
    # Optional custom annotations to add to deployed pods managed by CatalogSource object.
    annotations: {}
    # Optional custom labels to add to deployed pods managed by CatalogSource object.
    labels: {}
  ## Vizier configuration
  # The name of the Vizier instance deployed to the cluster.
  name: "pixie"
  # The name of the cluster that the Vizier is monitoring. If empty,
  # a random name will be generated.
  clusterName: "testcluster"
  # The version of the Vizier instance deployed to the cluster. If empty,
  # the operator will automatically deploy the latest version.
  version: ""
  # The deploy key is used to link the deployed Vizier to a specific user/project.
  # This is required if not specifying a customDeployKeySecret, and can be generated through the UI or CLI.
  deployKey: "XXX"
  # The deploy key may be read from a custom secret in the Pixie namespace. This secret should be formatted where the
  # key of the deploy key is "deploy-key".
  customDeployKeySecret: ""
  # Whether auto-update should be disabled.
  disableAutoUpdate: false
  # Whether the metadata service should use etcd for in-memory storage. Recommended
  # only for clusters which do not have persistent volumes configured.
  useEtcdOperator: false
  # The address of the Pixie cloud instance that the Vizier should be connected to.
  # This should only be updated when using a self-hosted version of Pixie Cloud.
  cloudAddr: "withpixie.ai:443"
  # DevCloudNamespace should be specified only for self-hosted versions of Pixie cloud which have no ingress to help
  # redirect traffic to the correct service. The DevCloudNamespace is the namespace that the dev Pixie cloud is
  # running on, for example: "plc-dev".
  devCloudNamespace: ""
  # A memory limit applied specifically to PEM pods. If none is specified, a default limit of 2Gi is set.
  pemMemoryLimit: ""
  # A memory request applied specifically to PEM pods. If none is specified, it will default to pemMemoryLimit.
  pemMemoryRequest: ""
  # DataAccess defines the level of data that may be accesssed when executing a script on the cluster.
  dataAccess: "Full"
  pod:
    # Optional custom annotations to add to deployed pods.
    annotations: {}
    # Optional custom labels to add to deployed pods.
    labels: {}
    resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 7Gi
    # requests:
    #   cpu: 100m
    #   memory: 5Gi
    nodeSelector: {}
    patches:
      vizier-pem: '{"spec": {"template": {"spec": { "tolerations": [{"key": "kubernetes.azure.com/scalesetpriority", "operator": "Equal", "effect": "NoSchedule" },{"key": "CriticalAddonsOnly", "operator": "Equal", "value": "true" }]}}}}'  

newrelic-infra-operator:
  # newrelic-infra-operator.enabled -- Install the [`newrelic-infra-operator` chart](https://github.com/newrelic/newrelic-infra-operator/tree/main/charts/newrelic-infra-operator) (Beta)
  enabled: false

nri-prometheus:
  # nri-prometheus.enabled -- Install the [`nri-prometheus` chart](https://github.com/newrelic/nri-prometheus/tree/main/charts/nri-prometheus)
  enabled: false

newrelic-k8s-metrics-adapter:
  # newrelic-k8s-metrics-adapter.enabled -- Install the [`newrelic-k8s-metrics-adapter.` chart](https://github.com/newrelic/newrelic-k8s-metrics-adapter/tree/main/charts/newrelic-k8s-metrics-adapter) (Beta)
  enabled: false

# -- change the behaviour globally to all the supported helm charts.
# See [user's guide of the common library](https://github.com/newrelic/helm-charts/blob/master/library/common-library/README.md) for further information.
# @default -- See [`values.yaml`](values.yaml)
global:
  # -- The cluster name for the Kubernetes cluster.
  cluster: "testcluster"
  # -- The license key for your New Relic Account. This will be preferred configuration option if both `licenseKey` and `customSecret` are specified.
  licenseKey: "XXX"
  # -- The license key for your New Relic Account. This will be preferred configuration option if both `insightsKey` and `customSecret` are specified.
  insightsKey: ""
  # -- Name of the Secret object where the license key is stored
  customSecretName: ""
  # -- Key in the Secret object where the license key is stored
  customSecretLicenseKey: ""

  # -- Additional labels for chart objects
  labels: {}
  # -- Additional labels for chart pods
  podLabels: {}

  images:
    # -- Changes the registry where to get the images. Useful when there is an internal image cache/proxy
    registry: ""
    # -- Set secrets to be able to fetch images
    pullSecrets: []

  serviceAccount:
    # -- Add these annotations to the service account we create
    annotations: {}
    # -- Configures if the service account should be created or not
    create:
    # -- Change the name of the service account. This is honored if you disable on this chart the creation of the service account so you can use your own
    name:

  # -- Sets pod's tolerations to node taints
  tolerations:
    - key: "kubernetes.azure.com/scalesetpriority"
      operator: "Equal"
      value: "spot"
      effect: "NoSchedule"
    - key: "CriticalAddonsOnly"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"

  # -- Sets pod/node affinities
  affinity: {}
  # -- (bool) Sets pod's hostNetwork
  # @default -- false
  hostNetwork:
  # -- Sets pod's dnsConfig
  dnsConfig: {}

  # -- Sets pod's priorityClassName
  priorityClassName: ""
  # -- Sets security context (at pod level)
  podSecurityContext: {}
  # -- Sets security context (at container level)
  containerSecurityContext: {}

  # -- Sets pod's node selector
  nodeSelector: {}

  # -- Adds extra attributes to the cluster and all the metrics emitted to the backend
  customAttributes: {}

  # -- (bool) Reduces number of metrics sent in order to reduce costs
  # @default -- false
  lowDataMode: true

  # -- (bool) In each integration it has different behavior. See [Further information](#values-managed-globally-3) but all aims to send less metrics to the backend to try to save costs |
  # @default -- false
  privileged:

  # -- (bool) Must be set to `true` when deploying in an EKS Fargate environment
  # @default -- false
  fargate:

  # -- Configures the integration to send all HTTP/HTTPS request through the proxy in that URL. The URL should have a standard format like `https://user:password@hostname:port`
  proxy: ""

  # -- (bool) Send the metrics to the staging backend. Requires a valid staging license key
  # @default -- false
  nrStaging:
  fedramp:
    # fedramp.enabled -- (bool) Enables FedRAMP
    # @default -- false
    enabled:

  # -- (bool) Sets the debug logs to this integration or all integrations if it is set globally
  # @default -- false
  verboseLog: